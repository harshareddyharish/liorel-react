{"ast":null,"code":"var _jsxFileName = \"/Users/ekincare/Desktop/harish/liorel-react/src/pages/TagsPage.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Flex, Box } from \"rebass\";\nimport { Table, message, Button, Tag, Modal } from \"antd\";\nimport Api from \"../services/api\";\nimport TagModal from \"../../src/components/TagModal\";\n\nconst TagsPage = () => {\n  const [tags, updateTags] = useState(undefined);\n  const [openTagModal, toggleTagModal] = useState(false);\n  const [tag, updateTag] = useState(undefined);\n  const [sortedInfo, updateSortInfo] = useState(null);\n  useEffect(() => {\n    fetchTags();\n  }, []);\n\n  const fetchTags = () => {\n    Api.fetchTags({}, onTagsSuccess, onTagsFailure);\n  };\n\n  const onTagsSuccess = response => {\n    updateTags(response.data[\"tags\"]);\n  };\n\n  const onTagsFailure = error => {\n    message.error(\"Failed to fetch tags\");\n  };\n\n  const closeModal = () => {\n    toggleTagModal(false);\n    updateTag(undefined);\n  };\n\n  const onSaveTag = () => {\n    fetchTags();\n    closeModal();\n  };\n\n  const editTag = record => {\n    updateTag(record);\n    toggleTagModal(true);\n  };\n\n  const deleteTag = record => {\n    Modal.confirm({\n      icon: \"\",\n      title: \"Are you sure want to delete this tag?\",\n      content: record[\"associated_users\"].length > 0 ? `This tag is associated with ${record['associated_users'].length} users` : \"\",\n      onOk: () => onDeleteTag(record)\n    });\n  };\n\n  const onDeleteTag = record => {\n    Api.deleteTag({\n      tagId: record[\"id\"]\n    }, onDeleteSuccess, onDeleteFailure);\n  };\n\n  const onDeleteSuccess = () => {\n    message.success(\"Successfully tag deleted\");\n    fetchTags();\n  };\n\n  const onDeleteFailure = error => {\n    if (error.response.data) {\n      message.error(error.response.data[\"message\"]);\n    } else {\n      message.error(\"Failed to delete tag\");\n    }\n  };\n\n  const handleChange = (pagination, filters, sorter) => {\n    updateSortInfo(sorter);\n  };\n\n  const columns = () => {\n    let list = [];\n    let sortInfo = sortedInfo || {};\n    list.push({\n      title: \"Name\",\n      dataIndex: \"name\",\n      key: \"name\",\n      sorter: (a, b) => String(a.name).length - String(b.name).length,\n      sortOrder: sortInfo.columnKey === 'name' && sortInfo.order\n    });\n    list.push({\n      title: \"Created at\",\n      dataIndex: \"created_at\",\n      key: \"created_at\",\n      sorter: (a, b) => new Date(b.created_at) - new Date(a.created_at),\n      sortOrder: sortInfo.columnKey === 'created_at' && sortInfo.order,\n      render: created_at => {\n        let d = new Date(created_at);\n        return /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 11\n          }\n        }, d.getFullYear(), \"-\", d.getMonth(), \"-\", d.getDate(), \" \", d.getHours(), \":\", d.getMinutes());\n      }\n    });\n    list.push({\n      title: \"Updated at\",\n      dataIndex: \"updated_at\",\n      key: \"updated_at\",\n      sorter: (a, b) => new Date(b.updated_at) - new Date(a.updated_at),\n      sortOrder: sortInfo.columnKey === 'updated_at' && sortInfo.order,\n      render: updated_at => {\n        let d = new Date(updated_at);\n        return /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 11\n          }\n        }, d.getFullYear(), \"-\", d.getMonth(), \"-\", d.getDate(), \" \", d.getHours(), \":\", d.getMinutes());\n      }\n    });\n    list.push({\n      title: \"Actions\",\n      render: record => {\n        return /*#__PURE__*/React.createElement(Flex, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(Button, {\n          type: \"link\",\n          onClick: () => editTag(record),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }\n        }, \"Edit\"), /*#__PURE__*/React.createElement(Button, {\n          type: \"link\",\n          onClick: () => deleteTag(record),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }\n        }, \"Delete\"));\n      }\n    });\n    return list;\n  };\n\n  if (!tags) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Flex, {\n    mb: \"20px\",\n    justifyContent: \"flex-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    onClick: () => toggleTagModal(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, \"Add Tag\")), tags && /*#__PURE__*/React.createElement(Table, {\n    columns: columns(),\n    dataSource: tags,\n    pagination: false,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }), openTagModal && /*#__PURE__*/React.createElement(TagModal, {\n    tag: tag,\n    tags: tags,\n    closeModal: closeModal,\n    onSaveTag: onSaveTag,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default TagsPage;","map":{"version":3,"sources":["/Users/ekincare/Desktop/harish/liorel-react/src/pages/TagsPage.js"],"names":["React","useState","useEffect","Flex","Box","Table","message","Button","Tag","Modal","Api","TagModal","TagsPage","tags","updateTags","undefined","openTagModal","toggleTagModal","tag","updateTag","sortedInfo","updateSortInfo","fetchTags","onTagsSuccess","onTagsFailure","response","data","error","closeModal","onSaveTag","editTag","record","deleteTag","confirm","icon","title","content","length","onOk","onDeleteTag","tagId","onDeleteSuccess","onDeleteFailure","success","handleChange","pagination","filters","sorter","columns","list","sortInfo","push","dataIndex","key","a","b","String","name","sortOrder","columnKey","order","Date","created_at","render","d","getFullYear","getMonth","getDate","getHours","getMinutes","updated_at"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Flex, Box } from \"rebass\";\nimport { Table, message, Button, Tag, Modal } from \"antd\";\nimport Api from \"../services/api\";\nimport TagModal from \"../../src/components/TagModal\";\n\nconst TagsPage = () => {\n  const [tags, updateTags] = useState(undefined);\n  const [openTagModal, toggleTagModal] = useState(false);\n  const [tag, updateTag] = useState(undefined);\n  const [sortedInfo,  updateSortInfo] = useState(null)\n\n  useEffect(() => {\n    fetchTags();\n  }, []);\n\n\n  const fetchTags = () => {\n    Api.fetchTags({}, onTagsSuccess, onTagsFailure);\n  };\n\n  const onTagsSuccess = (response) => {\n    updateTags(response.data[\"tags\"]);\n  };\n\n  const onTagsFailure = (error) => {\n    message.error(\"Failed to fetch tags\");\n  };\n\n  const closeModal = () => {\n    toggleTagModal(false);\n    updateTag(undefined);\n  };\n\n  const onSaveTag = () => {\n    fetchTags();\n    closeModal();\n  };\n\n  const editTag = (record) => {\n    updateTag(record);\n    toggleTagModal(true);\n  };\n\n  const deleteTag = (record) => {\n    Modal.confirm({\n      icon: \"\",\n      title: \"Are you sure want to delete this tag?\",\n      content: record[\"associated_users\"].length > 0 ? `This tag is associated with ${record['associated_users'].length} users` : \"\",\n      onOk: () => onDeleteTag(record),\n    });\n  };\n\n  const onDeleteTag = (record) => {\n    Api.deleteTag({ tagId: record[\"id\"] }, onDeleteSuccess, onDeleteFailure);\n  };\n\n  const onDeleteSuccess = () => {\n    message.success(\"Successfully tag deleted\");\n    fetchTags();\n  };\n\n  const onDeleteFailure = (error) => {\n    if (error.response.data) {\n      message.error(error.response.data[\"message\"]);\n    } else {\n      message.error(\"Failed to delete tag\");\n    }\n  };\n\n  const handleChange = (pagination, filters, sorter) => {\n    updateSortInfo(sorter)\n  };\n\n  const columns = () => {\n    let list = [];\n    let sortInfo = sortedInfo || {};\n    list.push({\n      title: \"Name\",\n      dataIndex: \"name\",\n      key: \"name\",\n      sorter: (a, b) => String(a.name).length - String(b.name).length,\n      sortOrder: sortInfo.columnKey === 'name' && sortInfo.order,\n    });\n    list.push({\n      title: \"Created at\",\n      dataIndex: \"created_at\",\n      key: \"created_at\",\n      sorter: (a, b) => new Date(b.created_at) - new Date(a.created_at),\n      sortOrder: sortInfo.columnKey === 'created_at' && sortInfo.order,\n      render: (created_at) => {\n        let d = new Date(created_at)\n        return(\n          <p>{d.getFullYear()}-{d.getMonth()}-{d.getDate()} {d.getHours()}:{d.getMinutes()}</p>\n        )\n      }\n    });\n    list.push({\n      title: \"Updated at\",\n      dataIndex: \"updated_at\",\n      key: \"updated_at\",\n      sorter: (a, b) => new Date(b.updated_at) - new Date(a.updated_at),\n      sortOrder: sortInfo.columnKey === 'updated_at' && sortInfo.order,\n      render: (updated_at) => {\n        let d = new Date(updated_at)\n        return(\n          <p>{d.getFullYear()}-{d.getMonth()}-{d.getDate()} {d.getHours()}:{d.getMinutes()}</p>\n        )\n      }\n    });\n    list.push({\n      title: \"Actions\",\n      render: (record) => {\n        return (\n          <Flex>\n            <Button type=\"link\" onClick={() => editTag(record)}>\n              Edit\n            </Button>\n            <Button type=\"link\" onClick={() => deleteTag(record)}>\n              Delete\n            </Button>\n          </Flex>\n        );\n      },\n    });\n    return list;\n  };\n\n  if (!tags) {\n    return null;\n  }\n\n  return (\n    <Box>\n      <Flex mb=\"20px\" justifyContent=\"flex-end\">\n        <Button type=\"primary\" onClick={() => toggleTagModal(true)}>\n          Add Tag\n        </Button>\n      </Flex>\n      {tags && (\n        <Table columns={columns()} dataSource={tags} pagination={false} onChange={handleChange}/>\n      )}\n      {openTagModal && (\n        <TagModal\n          tag={tag}\n          tags={tags}\n          closeModal={closeModal}\n          onSaveTag={onSaveTag}\n        />\n      )}\n    </Box>\n  );\n};\n\nexport default TagsPage;\n"]},"metadata":{},"sourceType":"module"}